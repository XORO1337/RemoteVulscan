version: '3.8'

services:
  # Backend API + Security Tools
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: scanner-backend
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=file:./data/scanner.db
      - REDIS_URL=redis://redis:6379
      - API_VERSION=v1
      - TOOLS_PATH=/tools
      - MAX_CONCURRENT_SCANS=5
      - SCAN_TIMEOUT=1800000
      - LOG_LEVEL=info
    volumes:
      - backend_data:/app/data
      - backend_logs:/app/logs
      - scan_reports:/app/reports
    depends_on:
      - redis
      - postgres
    networks:
      - scanner_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Application
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    container_name: scanner-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:8000/api/v1
      - NEXT_PUBLIC_WS_URL=ws://backend:8000
      - NEXT_TELEMETRY_DISABLED=1
    depends_on:
      - backend
    networks:
      - scanner_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: scanner-postgres
    environment:
      - POSTGRES_DB=scanner
      - POSTGRES_USER=scanner
      - POSTGRES_PASSWORD=scanner_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - scanner_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U scanner -d scanner"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Job Queue and Caching
  redis:
    image: redis:7-alpine
    container_name: scanner-redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - scanner_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: scanner-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - scanner_network
    restart: unless-stopped
    profiles:
      - production

volumes:
  backend_data:
    driver: local
  backend_logs:
    driver: local
  scan_reports:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  scanner_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16